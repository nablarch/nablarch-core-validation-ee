group = 'com.nablarch.framework'
version = '1.0.6'
description = 'BeanValidationバリデーション機能'

buildscript {
  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
    classpath "net.saliman:gradle-cobertura-plugin:${coberturaPluginVersion}"
  }
}
apply plugin: 'com.nablarch.dev.nablarch-build'
apply plugin: 'com.nablarch.dev.nablarch-maven-deploy'
apply plugin: 'com.nablarch.dev.nablarch-sonarqube'
apply plugin: 'com.nablarch.dev.nablarch-version'
apply plugin: 'cobertura'

sourceCompatibility=JavaVersion.VERSION_1_6
targetCompatibility=JavaVersion.VERSION_1_6

configurations {
  all*.exclude module: 'eclipselink'
  all*.exclude module: 'commons-dbcp'
  all*.exclude module: 'jsp-api-2.1-glassfish'
  all*.exclude module: 'h2'
}

dependencies {
  compile "com.nablarch.framework:nablarch-core-validation:${nablarchCoreValidationVersion}"
  compile 'javax.validation:validation-api:1.1.0.Final'

  provided 'org.hibernate:hibernate-validator:5.1.3.Final'
  provided 'org.glassfish:javax.el:3.0.0'

  testCompile "com.nablarch.framework:nablarch-core-repository:${nablarchCoreRepositoryVersion}"
  testRuntime "com.nablarch.framework:nablarch-core-applog:${nablarchCoreApplogVersion}"
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'

  testRuntime 'org.slf4j:slf4j-nop:1.7.24' // for cobertura
}

test {

  jvmArgs (
      '-XX:PermSize=32m',
      '-XX:+UseParallelGC',
      '-Dfile.encoding=UTF-8',
      '-XX:-UseSplitVerifier'
  )

  ignoreFailures = true

  cobertura {
    coverageSourceDirs = ["${projectDir}/src/main/java/"]
    coverageIgnoreTrivial = true
    coverageFormats = ['xml']
    coverageDirs = [project.sourceSets.main.output.classesDir]
    auxiliaryClasspath = files('src/main/resources') + configurations.testRuntime.asFileTree
  }
}

def coberturaReportDir = new File(project.buildDir, "cobertura-report")

task generateCoberturaReportByAnt(dependsOn: 'cobertura') {
  def dataFile = "${project.buildDir}/cobertura/cobertura.ser"

  inputs.file file(dataFile)
  outputs.dir coberturaReportDir

  doLast {
    ant {
      taskdef(resource: 'tasks.properties', classpath: configurations.cobertura.asPath + ':' + configurations.testRuntime.asPath)

      'cobertura-report'(
              destdir: coberturaReportDir,
              datafile: dataFile,
              srcdir: "${projectDir}/src/main/java/",
              format: 'xml'
      )
    }
  }
}

task coverage(dependsOn: ['clean', 'generateCoberturaReportByAnt'])

sonarRunner {
  sonarProperties {
    property "sonar.java.coveragePlugin", "cobertura"
    property "sonar.cobertura.reportPath", "${coberturaReportDir}/coverage.xml"
  }
}

tasks.sonarRunner {
  dependsOn = ['coverage']
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}

